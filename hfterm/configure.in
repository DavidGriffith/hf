dnl Process this file with autoconf to produce a configure script.

AC_INIT(configure.in)
AM_INIT_AUTOMAKE(hfterm, 0.1)
AM_CONFIG_HEADER(config.h)

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC

AM_PATH_GTK(1.2.0, ,
            AC_MSG_ERROR(Cannot find GTK: Is gtk-config in path?))

dnl Add the languages which your application supports here.
dnl ALL_LINGUAS=""
dnl AM_GNU_GETTEXT

AC_CHECK_FUNCS(vsnprintf,AC_DEFINE(HAVE_VSNPRINTF),OSLIBS="$OSLIBS vsnprintf.o")

dnl AC_CHECK_TYPE(int8_t,char)
dnl AC_CHECK_TYPE(u_int8_t,unsigned char)
dnl AC_CHECK_TYPE(int16_t,short)
dnl AC_CHECK_TYPE(u_int16_t,unsigned short)
dnl AC_CHECK_TYPE(int32_t,long)
dnl AC_CHECK_TYPE(u_int32_t,unsigned long)

AC_MSG_CHECKING(for bittypes)
bittypes=no
AC_TRY_COMPILE([#include <sys/types.h>], 
     [ int8_t a; u_int8_t b; int16_t c; u_int16_t d; int32_t e; u_int32_t f; ],
     AC_DEFINE(HAVE_BITTYPES) bittypes=yes)
AC_MSG_RESULT($bittypes)

dnl Set PACKAGE_LOCALE_DIR in config.h.
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${ac_default_prefix}/${DATADIRNAME}/locale")
else
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${prefix}/${DATADIRNAME}/locale")
fi

dnl Set PACKAGE_DATA_DIR in config.h.
if test "x${datadir}" = 'x${prefix}/share'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}")
  else
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}")
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${datadir}/${PACKAGE}")
fi

dnl Set PACKAGE_SOURCE_DIR in config.h.
packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}")

dnl Use -Wall if we have gcc.
changequote(,)dnl
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac
fi
changequote([,])dnl

AC_ARG_ENABLE(call,
[  --enable-call=CALL      Default to callsign CALL],
[mycall="${enableval}"],[mycall="NOCALL"])

pct_crc0="FFFF"
pct_crc1="FFFF"
pct_crc2="FFFF"
pct_crc3="FFFF"

AC_ARG_ENABLE(pactorcrc,
[  --enable-pactorcrc      Pactor CRC Init],
[pct_crc0="AC6D" pct_crc1="E0BE" pct_crc2="4FC0" pct_crc3="D3E7"],[])

AC_ARG_ENABLE(pctcrc0,
[  --enable-pctcrc0=CRC    Pactor CRC init 0],
[pct_crc0="${enableval}"],[])

AC_ARG_ENABLE(pctcrc1,
[  --enable-pctcrc1=CRC    Pactor CRC init 1],
[pct_crc1="${enableval}"],[])

AC_ARG_ENABLE(pctcrc2,
[  --enable-pctcrc2=CRC    Pactor CRC init 2],
[pct_crc2="${enableval}"],[])

AC_ARG_ENABLE(pctcrc3,
[  --enable-pctcrc3=CRC    Pactor CRC init 3],
[pct_crc3="${enableval}"],[])

AC_ARG_ENABLE(markfreq,
[  --enable-markfreq=HZ    Default mark frequency],
[freq_mark="${enableval}"],[freq_mark=1800])

AC_ARG_ENABLE(spacefreq,
[  --enable-spacefreq=HZ   Default space frequency],
[freq_space="${enableval}"],[freq_space=1600])

AC_DEFINE_UNQUOTED(MYCALL,"${mycall}")
AC_DEFINE_UNQUOTED(PCT_CRC_0,"${pct_crc0}")
AC_DEFINE_UNQUOTED(PCT_CRC_1,"${pct_crc1}")
AC_DEFINE_UNQUOTED(PCT_CRC_2,"${pct_crc2}")
AC_DEFINE_UNQUOTED(PCT_CRC_3,"${pct_crc3}")
AC_DEFINE_UNQUOTED(FREQ_MARK,${freq_mark})
AC_DEFINE_UNQUOTED(FREQ_SPACE,${freq_space})

AC_SUBST(MYCALL)
AC_SUBST(PCT_CRC_0)
AC_SUBST(PCT_CRC_1)
AC_SUBST(PCT_CRC_2)
AC_SUBST(PCT_CRC_3)
AC_SUBST(FREQ_MARK)
AC_SUBST(FREQ_SPACE)
AC_SUBST(OSLIBS)

AC_OUTPUT([
Makefile
src/Makefile
dnl intl/Makefile
dnl po/Makefile.in
])

